#!/usr/bin/env python

import cmd
import os
import sys
import requests


# color
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    RED='\033[31m'
class banner:
    versionBot = "v ^2.0"
    version = "v 0.1~"
    cmaname="(c) 2018 Arunkumar S"
    qbanner = """{}{}   
                     _             
                    (_)            
         __ _ _ __  _ _ __   __ _ 
        / _` | '_ \| | '_ \ / _` |
       | (_| | |_) | | | | | (_| |
        \__, | .__/|_|_| |_|\__, |
           | | |             __/ |
           |_|_|            |___/ 

                            by TamilBotNet
                            version: {}
            Updated by Crazy Danish Hacker
            Updated by Suyambu Software ~ Arun{}
        """.format(bcolors.BOLD,bcolors.RED,versionBot,bcolors.ENDC)

    cmsbaner ="""{}{}
:'######::'##::::'##::'######::::::::::::'######::'##::::'##:'########::'######::'##:::'##:'########:'########::
'##... ##: ###::'###:'##... ##::::::::::'##... ##: ##:::: ##: ##.....::'##... ##: ##::'##:: ##.....:: ##.... ##:
 ##:::..:: ####'####: ##:::..::::::::::: ##:::..:: ##:::: ##: ##::::::: ##:::..:: ##:'##::: ##::::::: ##:::: ##:
 ##::::::: ## ### ##:. ######::'#######: ##::::::: #########: ######::: ##::::::: #####:::: ######::: ########::
 ##::::::: ##. #: ##::..... ##:........: ##::::::: ##.... ##: ##...:::: ##::::::: ##. ##::: ##...:::: ##.. ##:::
 ##::: ##: ##:.:: ##:'##::: ##:::::::::: ##::: ##: ##:::: ##: ##::::::: ##::: ##: ##:. ##:: ##::::::: ##::. ##::
. ######:: ##:::: ##:. ######:::::::::::. ######:: ##:::: ##: ########:. ######:: ##::. ##: ########: ##:::. ##:
:......:::..:::::..:::......:::::::::::::......:::..:::::..::........:::......:::..::::..::........::..:::::..::
    ####################################### {}{}{}{}{}{}{} ###########################################
                                                                      version:  {}
""".format(bcolors.BOLD,bcolors.OKGREEN,bcolors.ENDC,bcolors.BOLD,bcolors.RED,cmaname,bcolors.ENDC,bcolors.BOLD,bcolors.OKGREEN,version)

     
class QpingMaster(cmd.Cmd):
    
    timeout = 3
    verbose = True

    version = "v 0.1^"
    prompt = "QpingMaster ~:)>"
    # global filename 
    filename = "active_domain_list.txt"

    def create_file(self,user_file):
        with open(user_file, "w") as output_file:
            output_file.close()
    
    # Qping 
    def qping(self,line):
        self.path = line
        print banner.qbanner
        if line == "" :
            usage = "\n [SYNTAX]  target.txt"
            print usage
        else:
            print self.path
            with open(self.path,"r") as input_file:
                QpingMaster().create_file(QpingMaster.filename)

                for line in input_file:
                    url = "http://{}".format(line.strip())
                    try:
                        if url =="http://":
                            exit()
                        else:
                            req = requests.get(url, timeout=QpingMaster.timeout)
                            if req.status_code == 200:
                                extra = "- HTTP 200 OK" if QpingMaster.verbose else ""
                                print("[+] Domain is online! ({}) {}".format(url, extra))
                                with open(QpingMaster.filename, "a") as output_file:
                                    output_file.write("{}\n".format(url))
                                    output_file.close()
                            else:
                                extra = "HTTP {}".format(req.status_code) if QpingMaster.verbose else ""
                                print("[-] Domain did not return 200 OK! ({}) {}".format(url, extra))
                    except KeyboardInterrupt:
                        exit()
                    except requests.exceptions.Timeout:
                        print("[-] Domain timed out! ({})".format(url))
                    except requests.exceptions.ConnectionError:
                        print("[-] Domain may not exist! ({})".format(url))

    # CMS Name Checker 
    def cmsnamechecker(self,site):
        print banner.cmsbaner
        self.load_data=site
        try:
            
            if self.load_data !="":
                 print " {}{}Target -{} {}".format(bcolors.BOLD,bcolors.RED,bcolors.ENDC,self.load_data)
                 url_data = "https://whatcms.org/APIEndpoint/Detect?key=746f350b4b16644cd12fdb77a8ea14155c083cd3269036b30126e423ba0d7d61ffdd4f&url={}".format(self.load_data)
                 object_json = requests.get(url_data)
                 temp_storage = object_json.json()
                 data_storage = temp_storage['result']
            
                 if data_storage['code'] == 200:
                     print " {}CMS NAME :{} {}{}{} ~ {}VERSION :{} {}{}{}".format(bcolors.BOLD,bcolors.ENDC,bcolors.OKGREEN,data_storage['name'],bcolors.ENDC,bcolors.BOLD,bcolors.ENDC,bcolors.OKGREEN,data_storage['version'],bcolors.ENDC)
                 else:
                     print "{}{}{}".format(bcolors.BOLD,bcolors.RED,data_storage['msg'])
            else:
                print "{} Error Found ! Check the Url {}".format(bcolors.WARNING,bcolors.ENDC)
        except:
             print "{} Error Found ! Check the Url {}".format(bcolors.WARNING,bcolors.ENDC)
        
    # last print 
    last_output = ''
    def do_shell(self,line):
        output = os.popen(line).read()
        print output
        self.last_output = output

    def do_qping(self,line):
        self.line=line
        
        QpingMaster().qping(self.line)

    def do_cmschecker(self,line):
        self.site = line
        
        print "Cms Name Checker {}".format(QpingMaster.version)
        QpingMaster().cmsnamechecker(self.site)


    def do_prompt(self, line):
        self.prompt = line + ': '

    def do_exit(self, line):
        return True

    def cmdloop_with_keyboard_interrupt(self):
        doQuit = False
        while doQuit != True:
            try:
                self.cmdloop()
                doQuit = True
            except KeyboardInterrupt:
                sys.stdout.write('\n')

if __name__ == '__main__':
    try:
        QpingMaster().cmdloop()
    except KeyboardInterrupt:
        sys.stdout.write('\nExit --- Qping Master n00B\n')

    